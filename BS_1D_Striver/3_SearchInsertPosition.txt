   https://leetcode.com/problems/search-insert-position/description/
   
Search Insert Position

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4



Logic :- 
1) apply binary search 
2) If target found at middle return its index
3) If target < middle-element Target is on right side 
4) Else target > middle-element then Target is on left side 
5) At last if target not found THEN THE START POINTER WILL BE AT THE POSITION WHERE THE TARGET COULD HAVE BE IN INSERT POITION therefore return the start pointer




Code :- 
class Solution {
    public int searchInsert(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            
            if (nums[mid] == target) {
                return mid; // Found the target, return its index
            } else if (nums[mid] < target) {
                start = mid + 1; // Target is in the right half
            } else {
                end = mid - 1; // Target is in the left half
            }
        }
        
        // If target is not found, 'start' will be the index where target should be inserted
        return start;
    }
}
